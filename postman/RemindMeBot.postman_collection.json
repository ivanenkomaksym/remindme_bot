{
	"info": {
		"_postman_id": "e58e68e6-002c-41c8-815c-d1f5513f4218",
		"name": "RemindMeBot API Tests",
		"description": "Complete API tests for RemindMeBot with setup and cleanup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17632648"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 409 (already exists)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"User created successfully\", function () {",
									"        const responseData = pm.response.json();",
									"        pm.expect(responseData).to.have.property('id');",
									"        pm.expect(responseData.id).to.eql(pm.variables.get('userId'));",
									"        pm.expect(responseData).to.have.property('userName').that.equals('testuser');",
									"        pm.collectionVariables.set('testUserCreated', 'true');",
									"    });",
									"} else if (pm.response.code === 409) {",
									"    console.log('User already exists, continuing with tests...');",
									"    pm.collectionVariables.set('testUserCreated', 'true');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": \"{{userId}}\", \"username\": \"testuser\", \"lastName\": \"User\", \"language\": \"en\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Location",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"location\": \"Europe/Kyiv\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}/location",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"location"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});",
									"",
									"pm.test(\"Test user exists in list\", function () {",
									"    const responseData = pm.response.json();",
									"    const testUserId = pm.variables.get('userId');",
									"    const found = responseData.some(user => user.id === testUserId);",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData.id).to.eql(pm.variables.get('userId'));",
									"    pm.expect(responseData).to.have.property('userName').that.equals('testuser');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"language\": \"es\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}/language",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"language"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reminders",
			"item": [
				{
					"name": "Create Reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reminder created successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('message').that.equals(pm.variables.get('reminderMessage'));",
									"    pm.expect(responseData).to.have.property('userId').that.equals(pm.variables.get('userId'));",
									"    // Store reminder ID for later tests and cleanup",
									"    pm.collectionVariables.set('reminderId', responseData.id.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\t\r\n    \"recurrenceType\": \"Daily\",\r\n\t\"selectedTime\": \"10:00\",\r\n\t\"reminderMessage\": \"{{reminderMessage}}\",\r\n    \"isActive\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Reminders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});",
									"",
									"pm.test(\"Created reminder is in the list\", function () {",
									"    const responseData = pm.response.json();",
									"    const reminderId = pm.collectionVariables.get('reminderId');",
									"    const found = responseData.some(r => r.id === reminderId);",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reminder data is correct\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id').that.equals(pm.collectionVariables.get('reminderId'));",
									"    pm.expect(responseData).to.have.property('message').that.equals(pm.variables.get('reminderMessage'));",
									"    pm.expect(responseData).to.have.property('userId').that.equals(pm.variables.get('userId'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/{{reminderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"{{reminderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reminder was updated\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('message').that.equals('Updated test reminder');",
									"    pm.expect(responseData).to.have.property('isActive').that.equals(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"message\": \"Updated test reminder\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/{{reminderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"{{reminderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Active Reminders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});",
									"",
									"pm.test(\"Updated reminder is not in active list\", function () {",
									"    const responseData = pm.response.json();",
									"    const reminderId = pm.collectionVariables.get('reminderId');",
									"    const found = responseData.some(r => r.id === reminderId);",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"active"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Premium Usage & NLP",
			"item": [
				{
					"name": "Get Initial Premium Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User has initial free tier usage\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.have.property('requestsLimit').that.equals(5);",
									"    pm.expect(responseData.data).to.have.property('requestsUsed').that.equals(0);",
									"    pm.expect(responseData.data).to.have.property('premiumStatus').that.equals('free');",
									"    pm.collectionVariables.set('initialRequestsUsed', responseData.data.requestsUsed);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/premium/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"premium",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create NLP Reminder (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"NLP reminder created successfully\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('userId').that.equals(pm.variables.get('userId'));",
									"    // Store NLP reminder ID for cleanup",
									"    pm.collectionVariables.set('nlpReminderId', responseData.id.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"remind me to buy groceries tomorrow at 2pm\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/from-text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"from-text"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Usage After NLP Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Usage increased by 1\", function () {",
									"    const responseData = pm.response.json();",
									"    const initialUsed = parseInt(pm.collectionVariables.get('initialRequestsUsed') || '0');",
									"    pm.expect(responseData.data.requestsUsed).to.equal(initialUsed + 1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/premium/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"premium",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exhaust Free Tier Requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set usage to 4 to test limit at 5",
									"pm.collectionVariables.set('targetUsage', '4');"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Usage set to near limit\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data.requestsUsed).to.equal(4);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"requestsUsed\": {{targetUsage}}}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/premium/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"premium",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create NLP Reminder (Should Succeed - Last Free Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Last free NLP reminder created\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.collectionVariables.set('lastFreeReminderId', responseData.id.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"remind me to call mom tomorrow at 3pm\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/from-text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"from-text"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create NLP Reminder (Should Fail - Limit Exceeded)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 (Bad Request) - Rate limit exceeded\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates limit exceeded\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('monthly limit');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"remind me to exercise tomorrow at 7am\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/from-text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"from-text"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upgrade to Premium",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User upgraded to premium\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data.premiumStatus).to.equal('basic');",
									"    pm.expect(responseData.data.requestsLimit).to.equal(50);",
									"    pm.expect(responseData.data.requestsUsed).to.equal(0); // Reset on upgrade",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"premiumStatus\": \"basic\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/premium/{{userId}}/upgrade",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"premium",
								"{{userId}}",
								"upgrade"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create NLP Reminder After Upgrade (Should Succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"NLP reminder created after upgrade\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.collectionVariables.set('postUpgradeReminderId', responseData.id.toString());",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"remind me to exercise tomorrow at 7am\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/from-text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"from-text"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Usage After Premium Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Premium usage tracked correctly\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data.requestsUsed).to.equal(1);",
									"    pm.expect(responseData.data.premiumStatus).to.equal('basic');",
									"    pm.expect(responseData.data.requestsLimit).to.equal(50);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/premium/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"premium",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Test Reminder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Only run if reminder was created",
									"const reminderId = pm.collectionVariables.get('reminderId');",
									"if (!reminderId || reminderId === '') {",
									"    console.log('No reminder to delete, skipping...');",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Reminder deleted successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear reminder ID after deletion",
									"pm.collectionVariables.set('reminderId', '');"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/{{reminderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"{{reminderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Test User Reminders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get reminders list for cleanup\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"// Store all reminder IDs for bulk deletion",
									"if (pm.response.code === 200) {",
									"    const reminders = pm.response.json();",
									"    if (Array.isArray(reminders) && reminders.length > 0) {",
									"        const reminderIds = reminders.map(r => r.id);",
									"        pm.collectionVariables.set('allReminderIds', JSON.stringify(reminderIds));",
									"        console.log(`Found ${reminderIds.length} reminders to delete: ${reminderIds.join(', ')}`);",
									"    } else {",
									"        pm.collectionVariables.set('allReminderIds', '[]');",
									"        console.log('No reminders found to delete');",
									"    }",
									"} else {",
									"    pm.collectionVariables.set('allReminderIds', '[]');",
									"    console.log('User not found or no reminders');",
									"}",
									"",
									"// Clear individual reminder IDs",
									"pm.collectionVariables.set('reminderId', '');",
									"pm.collectionVariables.set('nlpReminderId', '');",
									"pm.collectionVariables.set('lastFreeReminderId', '');",
									"pm.collectionVariables.set('postUpgradeReminderId', '');"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk Delete Reminders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the list of reminder IDs to delete",
									"const allReminderIdsStr = pm.collectionVariables.get('allReminderIds') || '[]';",
									"const allReminderIds = JSON.parse(allReminderIdsStr);",
									"",
									"// Store current index for iteration",
									"let currentIndex = parseInt(pm.collectionVariables.get('deleteIndex') || '0');",
									"",
									"if (currentIndex >= allReminderIds.length) {",
									"    console.log('All reminders processed, skipping...');",
									"    pm.execution.skipRequest();",
									"    return;",
									"}",
									"",
									"// Set current reminder ID to delete",
									"const currentReminderId = allReminderIds[currentIndex];",
									"pm.collectionVariables.set('currentReminderId', currentReminderId);",
									"console.log(`Deleting reminder ${currentIndex + 1}/${allReminderIds.length}: ${currentReminderId}`);",
									"",
									"// Increment index for next iteration",
									"pm.collectionVariables.set('deleteIndex', (currentIndex + 1).toString());"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Reminder deletion attempt\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
									"});",
									"",
									"// Check if we need to continue deleting",
									"const allReminderIdsStr = pm.collectionVariables.get('allReminderIds') || '[]';",
									"const allReminderIds = JSON.parse(allReminderIdsStr);",
									"const currentIndex = parseInt(pm.collectionVariables.get('deleteIndex') || '0');",
									"",
									"if (currentIndex < allReminderIds.length) {",
									"    // Continue with next reminder",
									"    console.log(`Continuing deletion... ${currentIndex}/${allReminderIds.length} processed`);",
									"    postman.setNextRequest('Bulk Delete Reminders');",
									"} else {",
									"    // All reminders processed",
									"    console.log('All reminders deletion completed');",
									"    pm.collectionVariables.set('deleteIndex', '0');",
									"    pm.collectionVariables.set('allReminderIds', '[]');",
									"    pm.collectionVariables.set('currentReminderId', '');",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reminders/{{userId}}/{{currentReminderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reminders",
								"{{userId}}",
								"{{currentReminderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Premium Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Premium usage reset or deleted\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);",
									"});",
									"",
									"// Clear premium-related variables",
									"pm.collectionVariables.set('initialRequestsUsed', '0');"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/premium/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"premium",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Only run if user was created in this test run",
									"const testUserCreated = pm.collectionVariables.get('testUserCreated');",
									"if (testUserCreated !== 'true') {",
									"    console.log('Test user was not created in this run, skipping deletion...');",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear test user flag after deletion",
									"pm.collectionVariables.set('testUserCreated', 'false');"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Set cleanup flag at collection level",
					"pm.collectionVariables.set('shouldCleanup', 'true');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Collection-level cleanup on any test failure",
					"if (pm.response.code >= 400) {",
					"    console.log('Test failed, triggering cleanup...');",
					"    pm.collectionVariables.set('testFailed', 'true');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": "12345"
		},
		{
			"key": "reminderId",
			"value": ""
		},
		{
			"key": "testUserCreated",
			"value": "false"
		},
		{
			"key": "shouldCleanup",
			"value": ""
		},
		{
			"key": "testFailed",
			"value": ""
		},
		{
			"key": "reminderMessage",
			"value": "Test reminder message",
			"type": "default"
		},
		{
			"key": "nlpReminderId",
			"value": ""
		},
		{
			"key": "lastFreeReminderId",
			"value": ""
		},
		{
			"key": "postUpgradeReminderId",
			"value": ""
		},
		{
			"key": "initialRequestsUsed",
			"value": "0"
		}
	]
}
