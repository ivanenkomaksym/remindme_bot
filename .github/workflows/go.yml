# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '*.md'
      - 'LICENSE*'
      - '.gitignore'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '*.md'
      - 'LICENSE*'
      - '.gitignore'
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

# Permissions required by dorny/test-reporter
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
  API_KEY: ${{ secrets.API_KEY }}
  DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
  
  BOT_ENABLED: true
  STORAGE: mongo
  NOTIFIER_TIMEOUT: 15m

  # AWS
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: remindmebot
  APP_RUNNER_SERVICE_ARN: arn:aws:apprunner:eu-central-1:861276125075:service/remindmebot/52395a313e234e52b68c38db60dee09a

  # GCP
  PROJECT_ID: remindmebot-473606
  GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

  # OpenAI
  OPENAI_ENABLED: true
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  OPENAI_MODEL: gpt-4o-mini  # Optional, defaults to gpt-4o-mini

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.4'
        check-latest: true

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
    - uses: actions/checkout@v4
        
    - name: Create test-results directory
      run: mkdir -p test-results
      
    - name: Run API Tests with Docker Compose
      run: |
        # Run the complete test suite using compose
        docker compose up --build --abort-on-container-exit
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: API Test Results
        path: test-results/test-results.xml
        reporter: java-junit
        
    - name: Cleanup Docker Resources
      if: always()
      run: docker compose down -v

  push-image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, api-tests]
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER  }}
        password: ${{ secrets.DOCKER_PASSWORD  }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      if: false # Disabled for now
      with:
        images: ${{ secrets.DOCKER_USER }}/remindme-bot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USER }}/remindme-bot:latest

  deploy-to-cloud-run:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    needs: push-image
    if: true
    steps:
      # Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GOOGLE_SERVICE_ACCOUNT_KEY }}

      # Install Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy remindme-bot \
            --image ivanenkomak/remindme-bot:latest \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated \
            --set-env-vars "BOT_ENABLED=${{ env.BOT_ENABLED }},BOT_TOKEN=${{ env.BOT_TOKEN }},PUBLIC_URL=${{ env.PUBLIC_URL }},API_KEY=${{ env.API_KEY }},
                            STORAGE=${{ env.STORAGE }},DB_CONNECTION_STRING=${{ env.DB_CONNECTION_STRING }},NOTIFIER_TIMEOUT=${{ env.NOTIFIER_TIMEOUT }},
                            OPENAI_ENABLED=${{ env.OPENAI_ENABLED }},OPENAI_API_KEY=${{ env.OPENAI_API_KEY }},OPENAI_MODEL=${{ env.OPENAI_MODEL }}"
      
  deploy-to-aws-app-runner:
    name: Build and Deploy to AWS App Runner
    runs-on: ubuntu-latest
    needs: 
      - build
      - api-tests
      - push-image
    if: false  # Disabled for now
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Using Access Keys stored in GitHub Secrets
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: 1.0
        run: |
          # Build the docker image and push it to ECR with a unique tag (the git commit SHA)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Set the image URL as an output for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy new image to AWS App Runner
        run: |
          # The AWS CLI requires a JSON object for the source configuration.
          # We build this JSON safely in a variable using printf and pass it directly.
          SOURCE_CONFIG=$(printf '{
            "ImageRepository": {
              "ImageIdentifier": "%s",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": {
                "RuntimeEnvironmentVariables": {
                  "BOT_TOKEN": "%s",
                  "PUBLIC_URL": "%s",
                  "API_KEY": "%s",
                  "STORAGE": "mongo",
                  "DB_CONNECTION_STRING": "%s",
                  "NOTIFIER_TIMEOUT": "%s",
                  "OPENAI_ENABLED": "%s",
                  "OPENAI_API_KEY": "%s",
                  "OPENAI_MODEL": "%s"
                }
              }
            }
          }' \
          "${{ steps.build-image.outputs.image }}" \
          "$BOT_TOKEN" \
          "$PUBLIC_URL" \
          "$API_KEY" \
          "$DB_CONNECTION_STRING" \
          "$NOTIFIER_TIMEOUT" \
          "$OPENAI_ENABLED" \
          "$OPENAI_API_KEY" \
          "$OPENAI_MODEL"
          )

          # Update the App Runner service using the generated JSON configuration.
          aws apprunner update-service \
            --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} \
            --source-configuration "$SOURCE_CONFIG"
